##############
## Types
##############

type User {
    _id: String!
    email: String!
    name: String!
    accountType: AccountType!
    status: UserStatus!

    agencyId: String
    agency: Agency

    createdAt: String!
    updatedAt: String!
}

enum UserStatus {
    INVITED
    ACTIVE
}

input UserOrder {
    field: UserOrderField!
    direction: UserOrderDirection!
}

enum UserOrderField {
    CREATED_AT
    NAME
}

enum UserOrderDirection {
    ASC
    DESC
}

type UserConnection {
    nodes: [User]
    totalCount: Int!
    hasMore: Boolean!
}

type Agency {
    _id: String!
    name: String

    clients(
        nameOrEmail: String
        take: Int
        skip: Int
        orderBy: UserOrder
    ): UserConnection

    members(
        nameOrEmail: String
        take: Int
        skip: Int
        orderBy: UserOrder
    ): UserConnection

    createdAt: String!
    updatedAt: String!
}

type Connection {
    _id: String!
    source: ConnectionSource!
    client: User!
    createdAt: String!
    updatedAt: String!
}

type Alert {
    _id: String!
    name: String!
    operation: AlertOperation!
    value: String!
    connection: Connection!
    createdAt: String!
    updatedAt: String!
}

enum AlertOperation {
    LESS_THAN
    GREATER_THAN
    EQUAL
}

enum AccountType {
    AGENCY
    BUSINESS
    CLIENT
}

enum ConnectionSource {
    FACEBOOK
    TIKTOK
    META
    GOOGLE
}

##############
## Inputs
##############

input CreateConnectionInput {
    source: ConnectionSource!
    clientId: String!
}

input CreateAlertInput {
    name: String
    message: String
    client: String
}

input InviteClientInput {
    name: String!
    email: String!
}

input RegisterAgencyInput {
    agencyName: String!
    email: String!
    password: String!

    clients: [InviteClientInput!]
    connections: [CreateConnectionInput!]
    alerts: [CreateAlertInput!]
}

input LoginInput {
    email: String!
    password: String!
}

##############
## Payloads
##############

type CreateAlertPayload {
    clientMutationId: String
    alert: Alert
}

type RegisterAgencyPayload {
    clientMutationId: String
    user: User
}

type InviteClientPayload {
    clientMutationId: String
    user: User
}

type CreateConnectionPayload {
    clientMutationId: String
    connection: Connection
}

type LoginPayload {
    success: Boolean!
    reason: String
    accessToken: String
}

##############
## Queries
##############

type Query {
    user(id: String!): User
    userByEmail(email: String!): User
    me: User

    agency(owner: String!): Agency

    connection(id: String!): Connection

    alert(id: String!): Alert
}

##############
## Mutations
##############

type Mutation {
    login(input: LoginInput!): LoginPayload

    registerAgency(input: RegisterAgencyInput!): RegisterAgencyPayload

    inviteClient(input: InviteClientInput!): InviteClientPayload

    createConnection(input: CreateConnectionInput!): CreateConnectionPayload

    createAlert(input: CreateAlertInput!): CreateAlertPayload
}
