type Query {
    user(id: String!): User

    viewer: User

    clients(
        nameOrEmail: String
        take: Int
        skip: Int
        orderBy: UserOrder
    ): UserConnection

    members(
        nameOrEmail: String
        take: Int
        skip: Int
        orderBy: UserOrder
    ): UserConnection

    connection(id: String!): Connection
    connections(
        take: Int
        skip: Int
        orderBy: ConnectionOrder
    ): ConnectionConnection

    alert(id: String!): Alert
    alerts(take: Int, skip: Int, orderBy: AlertOrder): AlertConnection
}

type Mutation {
    login(input: LoginInput!): LoginPayload

    registerAgency(input: RegisterAgencyInput!): RegisterAgencyPayload
    registerBusiness(input: RegisterBusinessInput!): RegisterBusinessPayload

    inviteClients(input: InviteClientsInput!): InviteClientsPayload
    inviteMembers(input: InviteMembersInput!): InviteMembersPayload

    createConnection(input: CreateConnectionInput!): CreateConnectionPayload
    syncConnection(input: SyncConnectionInput!): SyncConnectionPayload
    deleteConnection(input: DeleteConnectionInput!): DeleteConnectionPayload

    createAlerts(input: CreateAlertsInput!): CreateAlertsPayload
    updateAlert(input: UpdateAlertInput!): UpdateAlertPayload
    archiveAlert(input: ArchiveAlertInput!): ArchiveAlertPayload
}

type User {
    _id: String!
    email: String!
    name: String!
    accountType: AccountType!
    status: UserStatus!

    agency: Agency
    business: Business

    createdAt: String!
    updatedAt: String!
}

enum AccountType {
    AGENCY
    BUSINESS
    CLIENT
}

enum UserStatus {
    INVITED
    ACTIVE
}

enum OrderDirection {
    ASC
    DESC
}

enum UserOrderField {
    CREATED_AT
    NAME
}

input UserOrder {
    direction: OrderDirection!
    field: UserOrderField!
}

type UserConnection {
    nodes: [User]
    totalCount: Int!
    hasMore: Boolean!
}

type Business {
    _id: String!
    name: String

    members(
        nameOrEmail: String
        take: Int
        skip: Int
        orderBy: UserOrder
    ): UserConnection

    connections(
        take: Int
        skip: Int
        orderBy: ConnectionOrder
    ): ConnectionConnection

    createdAt: String!
    updatedAt: String!
}

type Agency {
    _id: String!
    name: String

    clients(
        nameOrEmail: String
        take: Int
        skip: Int
        orderBy: UserOrder
    ): UserConnection

    members(
        nameOrEmail: String
        take: Int
        skip: Int
        orderBy: UserOrder
    ): UserConnection

    connections(
        take: Int
        skip: Int
        orderBy: ConnectionOrder
    ): ConnectionConnection

    alerts(take: Int, skip: Int, orderBy: AlertOrder): AlertConnection

    createdAt: String!
    updatedAt: String!
}

type Connection {
    _id: String!
    source: ConnectionSource!
    client: User
    authUrl: String
    status: ConnectionStatus!
    syncedAt: String
    createdAt: String!
    updatedAt: String!
}

enum ConnectionSource {
    TIKTOK
    META
    GOOGLE
}

enum ConnectionStatus {
    OK
    SYNC_FAILED
}

enum ConnectionOrderField {
    CREATED_AT
}

input ConnectionOrder {
    direction: OrderDirection!
    field: ConnectionOrderField!
}

type ConnectionConnection {
    nodes: [Connection]
    totalCount: Int!
    hasMore: Boolean!
}

type Alert {
    _id: String!
    name: String!
    operation: AlertOperation!
    parameter: String!
    value: String!
    severity: AlertSeverity!
    fires: Int!
    archived: Boolean!

    clients(
        nameOrEmail: String
        take: Int
        skip: Int
        orderBy: UserOrder
    ): UserConnection

    createdAt: String!
    updatedAt: String!
}

type AlertConnection {
    nodes: [Alert]
    totalCount: Int!
    hasMore: Boolean!
}

enum AlertOrderField {
    CREATED_AT
    NAME
}

input AlertOrder {
    direction: OrderDirection!
    field: AlertOrderField!
}

enum AlertOperation {
    LESS_THAN
    GREATER_THAN
    EQUAL
}

enum AlertParameter {
    CLICKS
    CPM
    CTR
    REVENUE
    TRAFFIC
    AD_SPEND
    ROAS
    CONVERSION_RATE
}

enum AlertSeverity {
    LOW
    NORMAL
    HIGH
    URGENT
    CRITICAL
}

enum BillingPlan {
    STARTER
    PROFESSIONAL
    SCALE
}

type Metric {
    type: MetricType!
    value: String!
    from: String!
    to: String!
    createdAt: String!
}

enum MetricType {
    CLICKS
    CPM
    CTR
    REVENUE
    TRAFFIC
    AD_SPEND
    ROAS
    CONVERSION_RATE
}

type MetricConnection {
    nodes: [Metric]
    totalCount: Int!
    hasMore: Boolean!
}

enum MetricOrderField {
    CREATED_AT
}

input MetricOrder {
    direction: OrderDirection!
    field: MetricOrderField!
}

input CreateConnectionInput {
    clientMutationId: String
    source: ConnectionSource!
    clientId: String
}

type CreateConnectionPayload {
    clientMutationId: String
    connection: Connection
}

input SyncConnectionInput {
    clientMutationId: String
    id: String!
}

type SyncConnectionPayload {
    clientMutationId: String
    connection: Connection
}

input DeleteConnectionInput {
    clientMutationId: String
    id: String!
}

type DeleteConnectionPayload {
    clientMutationId: String
}

input CreateAlertsInput {
    clientMutationId: String
    alerts: [CreateAlertInput]!
}

input CreateAlertInput {
    name: String!
    severity: AlertSeverity!
    parameter: AlertParameter!
    operation: AlertOperation!
    value: String!
    clientIds: [String!]
}

type CreateAlertsPayload {
    clientMutationId: String
    alerts: [Alert]
}

input UpdateAlertInput {
    clientMutationId: String
    alertId: String!
    name: String!
    severity: AlertSeverity!
    parameter: AlertParameter!
    operation: AlertOperation!
    value: String!
    clientIds: [String!]
}

type UpdateAlertPayload {
    clientMutationId: String
    alert: Alert
}

input ArchiveAlertInput {
    clientMutationId: String
    id: String!
}

type ArchiveAlertPayload {
    clientMutationId: String
}

input InviteClientsInput {
    clientMutationId: String
    clients: [InviteClientInput]!
}

input InviteClientInput {
    clientMutationId: String
    name: String!
    email: String!
}

type InviteClientsPayload {
    clientMutationId: String
    clients: [User]
}

input InviteMembersInput {
    clientMutationId: String
    members: [InviteMemberInput]!
}

input InviteMemberInput {
    clientMutationId: String
    name: String!
    email: String!
}

type InviteMembersPayload {
    clientMutationId: String
    members: [User]
}

input RegisterAgencyInput {
    clientMutationId: String
    agencyName: String!
    email: String!
    password: String!
}

type RegisterAgencyPayload {
    clientMutationId: String
    user: User
}

input RegisterBusinessInput {
    clientMutationId: String
    businessName: String!
    email: String!
    password: String!
}

type RegisterBusinessPayload {
    clientMutationId: String
    user: User
}

input LoginInput {
    clientMutationId: String
    email: String!
    password: String!
}

type LoginPayload {
    clientMutationId: String
    success: Boolean!
    reason: String
    accessToken: String
    user: User
}
